"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var utils = _interopRequireWildcard(require("./utils"));

var _reqlib = require("reqlib");

var HTTP_STATUS_NOT_FOUND = 404,
    HTTP_STATUS_SUCCESS = 200;

var Indices =
/*#__PURE__*/
function () {
  function Indices(config, request) {
    (0, _classCallCheck2.default)(this, Indices);
    this.config = config;
    this.paramExcludes = (0, _keys.default)(config).concat(['_index', '_indices', '_type', '_types', 'alias']);
    this.request = request || new _reqlib.Request(config);
  } // http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/


  (0, _createClass2.default)(Indices, [{
    key: "alias",
    value: function alias() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof data === 'function') {
        callback = data;
        data = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(options.alias && index ? index : null, options.alias && index ? '_alias' : '_aliases', options.alias && index ? options.alias : null);

      if (options.alias && index) {
        return this.request.put(options, data, callback);
      }

      return this.request.post(options, data, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
    // Disclaimer: does not currently support pre 0.90 ways of retrieving aliases

  }, {
    key: "aliases",
    value: function aliases() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!options.alias) {
        options.alias = '*';
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_alias', options.alias);
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/

  }, {
    key: "analyze",
    value: function analyze() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof data === 'function') {
        callback = data;
        data = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_analyze'); // documentation indicates GET method...
      // sending POST data via GET not typical, using POST instead

      return this.request.post(options, data, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/

  }, {
    key: "clearCache",
    value: function clearCache() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_cache/clear');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/

  }, {
    key: "closeIndex",
    value: function closeIndex() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.path = utils.pathAppend(index, '_close');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/

  }, {
    key: "createIndex",
    value: function createIndex() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof data === 'function') {
        callback = data;
        data = options;
        options = {};
      }

      if (!callback && !data && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.path = utils.pathAppend(index);
      return this.request.put(options, data, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/

  }, {
    key: "createTemplate",
    value: function createTemplate() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var template = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof template === 'function') {
        callback = template;
        template = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['name']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      options.path = utils.pathAppend('_template', options.name);
      return this.request.put(options, template, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/

  }, {
    key: "deleteAlias",
    value: function deleteAlias() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index', 'alias']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.path = utils.pathAppend(index, '_alias', options.alias);
      return this.request.delete(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/

  }, {
    key: "deleteIndex",
    value: function deleteIndex() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.path = utils.pathAppend(index);
      return this.request.delete(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/

  }, {
    key: "deleteMapping",
    value: function deleteMapping() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index', '_type']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config),
          type = utils.getTypeSyntax(options, this.config);
      options.path = utils.pathAppend(index, type);
      return this.request.delete(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/

  }, {
    key: "deleteTemplate",
    value: function deleteTemplate() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['name']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      options.path = utils.pathAppend('_template', options.name);
      return this.request.delete(options, callback);
    } // https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html
    // https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-types-exists.html
    // Also replicated (somewhat) in core... core.exists is more flexible, however

  }, {
    key: "exists",
    value: function exists() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config),
          statusCode,
          type = utils.getTypeSyntax(options, this.config);
      options.path = type ? utils.pathAppend(index, '/_mapping', type) : utils.pathAppend(index);
      this.request.once('response', function (context) {
        return statusCode = context.state.statusCode;
      });
      return this.request.head(options, function (err, data) {
        if (err) {
          if (err.statusCode && err.statusCode === HTTP_STATUS_NOT_FOUND) {
            data = {
              exists: false,
              statusCode: err.statusCode
            };
            return utils.promiseResolveOrCallback(data, callback);
          }

          return utils.promiseRejectOrCallback(err, callback);
        } // must listen to event...


        data = {
          exists: statusCode === HTTP_STATUS_SUCCESS
        };
        return utils.promiseResolveOrCallback(data, callback);
      });
    }
  }, {
    key: "flush",
    value: function flush() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_flush');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/

  }, {
    key: "mappings",
    value: function mappings() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config),
          type = utils.getTypeSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, index ? utils.pathAppend(type) : null, '_mapping');
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/

  }, {
    key: "openIndex",
    value: function openIndex() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_open');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/

  }, {
    key: "putMapping",
    value: function putMapping() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var mapping = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof mapping === 'function') {
        callback = mapping;
        mapping = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index', '_type']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config),
          type = utils.getTypeSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_mapping', index ? type : null);
      return this.request.put(options, mapping, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/

  }, {
    key: "refresh",
    value: function refresh() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_refresh');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-segments/

  }, {
    key: "segments",
    value: function segments() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_segments');
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/

  }, {
    key: "settings",
    value: function settings() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['_index']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_settings');
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/

  }, {
    key: "snapshot",
    value: function snapshot() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.path = utils.pathAppend(index, '_gateway/snapshot');
      return this.request.post(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-stats/

  }, {
    key: "stats",
    value: function stats() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config),
          type = utils.getTypeSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_stats', type);
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-status/

  }, {
    key: "status",
    value: function status() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_status');
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/

  }, {
    key: "templates",
    value: function templates() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }

      var err = utils.optionsUndefined(options, this.config, ['name']);

      if (err) {
        return utils.promiseRejectOrCallback(err, callback);
      }

      options.query = utils.exclude(options, this.paramExcludes.concat('name'));
      options.path = utils.pathAppend('_template', options.name);
      return this.request.get(options, callback);
    } // http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/

  }, {
    key: "updateSettings",
    value: function updateSettings() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var settings = arguments.length > 1 ? arguments[1] : undefined;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof settings === 'function') {
        callback = settings;
        settings = options;
        options = {};
      }

      var index = utils.getIndexSyntax(options, this.config);
      options.query = utils.exclude(options, this.paramExcludes);
      options.path = utils.pathAppend(index, '_settings');
      return this.request.put(options, settings, callback);
    }
  }]);
  return Indices;
}();

module.exports = {
  Indices: Indices
};
//# sourceMappingURL=indices.js.map
